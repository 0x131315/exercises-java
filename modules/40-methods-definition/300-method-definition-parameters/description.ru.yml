---

name: Определение методов
theory: |

  Методы могут не только возвращать значения, но и принимать их в виде параметров (их ещё называют аргументами). С параметрами методов мы уже сталкивались много раз:

  ```java
  // Принимает на вход один параметр любого типа
  System.out.println("я параметр");

  // Принимает на вход индекс, по которому извлекается символ
  "какой-то текст".charAt(3); // о

  // Принимает на вход два строковых параметра
  // первый – что ищем, второй - на что меняем
  "google".replace("go", "mo"); // moogle

  // Принимает на вход два числовых параметра
  // первый – начальный индекс (включая), второй – конечный индекс (не включая)
  "hexlet".substring(1, 3); // ex
  ```

  В этом уроке, мы научимся создавать методы, которые принимают на вход параметры. Представим, что перед нами стоит задача, реализовать статический метод `App.getLastChar()`, возвращающий последний символ в строке переданной ему на вход как параметр. Вот как будет выглядить использование этого метода:

  ```java
  // Передача параметров напрямую без переменных
  App.getLastChar("Hexlet"); // t
  App.getLastChar("Goo"); // o

  // Передача параметров через переменные
  var name1 = "Hexlet";
  App.getLastChar(name1); // t
  var name2 = "Goo";
  App.getLastChar(name2); // o
  ```

  Из описания и примеров кода мы можем сделать следующие выводы:

  * Нам нужно определить статический метод `getLastChar()` в классе `App`
  * Метод должен принимать на вход один параметр типа `String`
  * Метод должен возвращать значение типа `char`

  Определение метода:

  ```java
  class App {
      public static char getLastChar(String text) {
          // Вычисляем индекс последнего символа как длина строки - 1
          return text.charAt(text.length() - 1);
      }
  }
  ```

  https://replit.com/@hexlet/java-basics-methods-parameters-1

  Разберем его. `char` - говорит нам о типе возвращаемого значения. В скобках указывается тип параметра (`String`) и его имя (`text`). Так как внутри метода мы не знаем с каким конкретно значением идет работа, то параметры всегда описываются как переменные. Имя параметра может быть любым, оно не связано с тем как вызывается метод. Главное чтобы это имя отражало смысл того значения, которое содержится внутри. Конкретное значение параметра будет зависеть от вызова этого метода. Мы могли определить метод и вот так:

  ```java
  class App {
      public static char getLastChar(String str) {
          return str.charAt(str.length() - 1);
      }
  }
  ```

  Конкретное значение параметра будет зависеть от вызова этого метода.

  ```java
   // Внутри метода str будет равна 'hexlet'
   App.getLastChar('hexlet'); // t

   // Внутри метода str будет равна 'code'
   App.getLastChar('code'); // e

   // Внутри метода str будет равна 'Winter is coming'
   // Имя переменной снаружи не связанно с именем переменной в определении метода
   var text = "Winter is coming";
   App.getLastChar(text); // g
   ```

  Параметры в Java всегда обязательны. Если попробовать вызвать метод без параметра, то компилятор выдаст ошибку:

  ```sh
  App.getLastChar(); // такой код не имеет смысла
  method getLastChar in class App cannot be applied to given types;
    required: String
    found:    no arguments
    reason: actual and formal argument lists differ in length
  ```

  Точно таким же образом можно указывать два, три и более параметров. Каждый параметр отделяется от другого запятой:

  ```java
  class App {
      // Метод по нахождению среднего арифметического двух чисел
      // Возвращаемый тип double,
      // так как в результате деления может получиться дробное число
      public static double average(int x, int y) {
          return (x + y) / 2.0;
      }
  }

  App.average(1, 5); // 3.0
  App.average(1, 2); // 1.5
  ```

  https://replit.com/@hexlet/java-basics-methods-parameters-2

  Методы могут требовать на вход любое количество параметров, которое им нужно для работы:

  ```java
  // первый параметр – что ищем
  // второй параметр – на что меняем
  'google'.replace('go', 'mo'); // moogle
  ````

  Для создания таких методов, нужно в определении указать нужное количество параметров через запятую, дав им понятные имена. Ниже пример определения метода `replace()`, который заменяет в слове одну часть строки на другую:

  ```java
  class App {
      public static String replace(String text, String from, String to) {
          // здесь тело метода, но мы его
          // опускаем, чтобы не отвлекаться
      }
  }

  App.replace('google', 'go', 'mo'); // moogle
  ```

  Когда параметров два и более, то практически для всех методов становится важен порядок передачи этих параметров. Если его поменять, то метод отработает по-другому:

  ```java
  // ничего не заменилось,
  // так как внутри google нет mo
  App.replace('google', 'mo', 'go'); // google
  ```

instructions: |

  Реализуйте статический метод `App.truncate()`, который обрезает переданную строку до указанного количества символов, добавляет в конце многоточие и возвращает получившуюся строку. Подобная логика часто используется на сайтах, чтобы отобразить длинный текст в сокращенном виде. Метод принимает два параметра:

  1. Строка (`String`), которую нужно обрезать
  2. Число (`int`) символов, которые нужно оставить

  Пример того, как должен работать написанный вами метод:

  ```java
  // Передаем текст напрямую
  // Обрезаем текст, оставляя 2 символа
  App.truncate("hexlet", 2); // "he..."

  // Через переменную
  var text = "it works!"
  // Обрезаем текст, оставляя 4 символа
  App.truncate(text, 4); // => "it w..."
  ```

  Реализовать этот метод можно различными способами, подскажем лишь один из них. Для решения этим способом вам понадобится взять подстроку из строки, переданной первым параметром в метод `truncate()`. Используйте для этого метод [substring()](https://ru.hexlet.io/qna/java/questions/kak-izvlech-podstroku-iz-stroki-v-java). Подумайте, исходя из задания, с какого индекса и по какой вам надо извлечь подстроку?

    ```java
    var text = "welcome";
    // Передавать параметры в метод можно через переменные
    var index = 3;
    text.substring(0, index); // "wel"
    ```

  С точки зрения проверочной системы не имеет значения, каким из способов будет реализован метод `truncate()` внутри, главное – чтобы он выполнял поставленную задачу
