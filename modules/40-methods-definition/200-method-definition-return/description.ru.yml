---

name: Возврат значений в Java
theory: |

  Методы в Java становятся по настоящему полезными, когда они начинают возвращать данные, вместо печати их на экран. Посмотрите на пример:

  ```java
  var message = App.greetHexlet();
  System.out.println(message);
  ```

  Мы присваиваем переменной результат работы метода. Для работы такого кода метод должен использовать инструкцию `return`:

  ```java
  // внутри класса App
  // Вместо Void теперь String, потому что у метода есть возврат
  public static String greetHexlet() {
      var message = "Hello, Hexlet!";
      return message;
  }
  ```

  `return` особая инструкция, которая берет выражение записанное справа и отдает его наружу, тому коду, который вызвал метод. Само выполнение метода на этом завершается, любой код после `return` не выполняется:

  ```java
  // внутри класса App
  public static String greetHexlet() {
      var message = "Hello, Hexlet!";
      return message;
      System.out.println("Я никогда не выполнюсь");
  }
  ```

  Если метод возвращает значение, то его тип должен быть указан в определении метода. Здесь не получится использовать `var`, функция должна однозначно описывать свой возврат.

  Для возврата не обязательно использовать переменную. Так как `return` работает с выражениями, то справа от него может появиться почти все что угодно. Здесь нужно руководствоваться принципами читаемости кода:

  ```java
  public static String greetHexlet() {
      return "Hello, Hexlet!";
  }
  ```

  И пример с вычислением:

  ```java
  public static int doubleFive() {
      return 5 + 5;
  }
  ```

  Вопрос на самопроверку. Что выведет этот код?

  ```java
  // Определение
  public static int run() {
    return 5;
    return 10;
  }

  // Использование
  App.run(); // => ?
  ```

instructions: |

  Реализуйте функцию `getByteSize()`, которая возвращает текущую дату

  ```java
  App.getCurrentDate();
  ```


# tips: []
