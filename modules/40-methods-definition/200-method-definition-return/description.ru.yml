---

name: Возврат значений
theory: |

  Методы которые мы определяли в предыдущих уроках, заканчивали свою работу тем, что печатали на экран какие-то данные:

  ```java
  public class App {
      public static void greeting() {
          System.out.println("Winter is coming");
      }
  }
  ```

  Пользы от таких методов не очень много, так как их результатом работы невозможно воспользоваться внутри программы. Рассмотрим это на примере.

  Возьмем задачу обработки электронной почты. Когда пользователь регистрируется на каком-то сайте, то он может ввести email любым способом:

  * Добавив случайно пробелы в начале или в конце `_support@hexlet.io__`
  * Использовав буквы в разном регистре `SUPPORT@hexlet.io`

  Если мы сохраним его в таком виде в базу данных, то пользователь, скорее всего, не сможет войти на сайт, так как будет вбивать адрес без пробелов и используя другой регистр символов. Чтобы этого не произошло, email нужно подготовить к записи в базу, привести его к нижнему регистру и обрезать пробельные символы по краям строки. Вся задача решается в пару строчек:

  ```java
  class App {
      public static void main(String[] args) {
          // В реальности email приходит из формы
          var email = "  SuppORT@hexlet.IO";
          // обрезаем пробельные символы
          var trimmedEmail = email.trim();
          // приводим к нижнему регистру
          var preparedEmail = trimmedEmail.toLowerCase();
          System.out.println(preparedEmail); // => "support@hexlet.io"
          // здесь будет запись в базу данных
      }
  }
  ```

  Этот код стал возможен только благодаря возврату значения. Методы `trim()` и `toLowerCase()` ничего не печатают на экран (в консоль), они **возвращают** результат своей работы и поэтому мы можем записать его в переменные. Если бы они вместо этого печатали на экран, мы бы не могли присвоить результат их работы переменной. Как мы не можем сделать с определенным выше методом `greeting()`:

  ```java
  // Java будет ругаться что `greeting()` ничего не возвращает
  // Код не заработает
  var message = App.greeting();
  ```

  Изменим метод `greeting()` таким образом, чтобы он начал возвращать данные, вместо их печати. Для этого нам понадобится выполнить две правки:

  * Описать тип возвращаемых данных. В нашем случае это строка `String`
  * Выполнить возврат вместо печати на экран

  ```java
  class App {
      public static String greeting() {
          return "Winter is coming!";
      }
  }
  ```

  Вместо `void` теперь написано `String`, потому что у метода есть возврат. Так мы указали Java, что результатом работы метода будет строка.

  `return` особая инструкция, которая берет выражение записанное справа и отдает его наружу, тому коду, который вызвал метод. Как только Java натыкается на `return`, выполнение метода на этом завершается.

  ```java
  // Теперь этот код работает
  var message = App.greeting();
  // Мы можем выполнить какие-то действия над результатом
  System.out.println(message.toUpperCase()); // => "WINTER IS COMING!"
  ```

  Любой код после `return` не выполняется:

  ```java
  class App {
      public static String greeting() {
          return "Winter is coming!";
          // Любой код ниже не выполнится никогда
          System.out.println("Я никогда не выполнюсь");
      }
  }
  ```

  Даже если метод возвращает данные, это не ограничивает его в том, что он печатает. Кроме возврата данных мы можем и печатать:

  ```java
  class App {
      public static String greeting() {
          System.out.println("Я появлюсь в консоли");
          return "Winter is coming!";
      }
  }

  // Где-то в другом методе
  // И напечатает текст на экран и вернет значение
  var value = App.greeting();
  ```

  Возвращать можно не только конкретное значение. Так как `return` работает с выражениями, то справа от него может появиться почти все что угодно. Здесь нужно руководствоваться принципами читаемости кода:

  ```java
  class App {
      public static String greeting() {
          var message = "Winter is coming!"
          return message;
      }
  }
  ```

  Здесь мы не возвращаем переменную, возвращается всегда значение, которое находится в этой переменной. Ниже пример с вычислениями:


  ```java
  class App {
      public static long doubleFive() {
          // или return 5 + 5;
          var result = 5 + 5;
          return result;
      }
  }
  ```

  В этом примере в определении метода использовался `long` так как возвращается целое число.

  Вопрос на самопроверку. Что выведет этот код?

  ```java
  // Определение
  class App {
      public static int run() {
          return 5;
          return 10;
      }
  }

  // Использование
  App.run(); // => ?
  ```

instructions: |

  Реализуйте статический метод `getCurrentYear()`, который возвращает наружу текущий год в виде числа

  ```java
  var year = App.getCurrentYear();
  System.out.println(year); // выведет текущий год
  ```

  Для выполнения этого задания, вам понадобится выполнить несколько действий:

  * Получить текущую дату с помощью метода `LocalDate.now()`. Этот метод возвращает объект типа `LocalDate`. В реальности у этого объекта есть метод `getYear()`, который выполняет нашу задачу, но здесь мы хотим потренироваться и не будем его использовать.
  * Преобразовать дату в строку с помощью метода `toString()`. Формат строки: *yyyy-mm-dd*, например, *2021-11-05*
  * Извлечь из неё год с помощью метода [substring()](https://ru.hexlet.io/qna/java/questions/kak-izvlech-podstroku-iz-stroki-v-java)
  * Преобразовать год из строки в число с помощью метода `Integer.parseInt()` и вернуть наружу

# tips: []
