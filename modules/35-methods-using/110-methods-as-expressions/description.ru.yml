---

name: Вызов метода — выражение
theory: |

  В программировании, выражение – нечто возвращающее результат, то есть то что мы можем присвоить переменной или, например, вывести на экран. Мы уже знаем достаточно много о выражениях и о принципах их построения. Математические выражения, конкатенация – все это выражения:

  ```java
  1 + 5 * 3;
  "He" + "Let";
  // Переменные могут быть частью выражения
  rate * 5;
  ```

  Особенность выражений в том, что они возвращают результат, который можно присвоить переменной. Например:

  ```java
  // Тут выражение это 1 + 5
  var sum = 1 + 5;
  ```

  Но не все в программировании является выражением. Определение переменной это инструкция, она не может быть частью выражения. То есть такой код выдаст ошибку:

  ```java
  // Бесмысленный код, который не сработает
  10 + var sum = 1 + 5;
  ```

  Почему об этом важно знать? Как вы увидите дальше, выражения можно комбинировать получая все более сложное поведение в самых неожиданных местах и самым неожиданным образом. Вы будете лучше понимать как можно соединять части кода, чтобы получить нужный результат.

  Поговорим о методах. Вызов метода это выражение или нет? Мы знаем что методы возвращают результат, то есть да, они выражения. Из этого автоматически следует много интересного. Например мы можем использовать вызов метода прямо в математических операциях. Вот как можно получить индекс последнего символа в слове:

  ```java
  // Индексы начинаются с нуля
  const name = "Java";
  // Вызов метода и вычитание вместе!
  const lastIndex = name.length() - 1;
  System.out.println(lastIndex); // 4
  ```

  В этом коде нет нового синтаксиса. Мы всего лишь соединили уже известные части опираясь на их природу. Можно пойти еще дальше:

  ```java
  System.out.println(name.length() - 1); // 4
  ```

  Все это справедливо для любых методов, например строковых:

  ```java
  var name = "Java";
  // toUpperCase – переводит слово в верхний регистр
  System.out.println("Привет" + name.toUpperCase()); // "Привет JAVA"
  ```

instructions: |

  Вам даны три переменные с фамилиями разных людей. Составьте и выведите на экран слово из символов в таком порядке:

  1. третий символ из первой строки;
  2. второй символ из второй строки;
  3. четвертый символ из третьей строки;
  4. пятый символ из второй строки;
  5. третий символ из второй строки.

  Вывод результата должен быть примерно в таком виде:

  <pre class='hexlet-basics-output'>
  a b c d e
  </pre>

# tips: []
